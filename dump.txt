
atomic_module.ko:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <atomic_xchg>:
   0:	55                   	push   %rbp
   1:	89 f0                	mov    %esi,%eax
   3:	48 89 e5             	mov    %rsp,%rbp
   6:	87 07                	xchg   %eax,(%rdi)
   8:	5d                   	pop    %rbp
   9:	c3                   	retq   
   a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000000010 <atomic_and>:
  10:	55                   	push   %rbp
  11:	48 89 e5             	mov    %rsp,%rbp
  14:	f0 21 3e             	lock and %edi,(%rsi)
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   
  19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000000020 <atomic_or>:
  20:	55                   	push   %rbp
  21:	48 89 e5             	mov    %rsp,%rbp
  24:	f0 09 3e             	lock or %edi,(%rsi)
  27:	5d                   	pop    %rbp
  28:	c3                   	retq   
  29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000000030 <atomic_xor>:
  30:	55                   	push   %rbp
  31:	48 89 e5             	mov    %rsp,%rbp
  34:	f0 31 3e             	lock xor %edi,(%rsi)
  37:	5d                   	pop    %rbp
  38:	c3                   	retq   
  39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000000040 <test_atomic_load_n>:
  40:	e8 00 00 00 00       	callq  45 <test_atomic_load_n+0x5>
  45:	55                   	push   %rbp
  46:	48 89 e5             	mov    %rsp,%rbp
  49:	48 83 ec 08          	sub    $0x8,%rsp
  4d:	c7 45 fc 63 00 00 00 	movl   $0x63,-0x4(%rbp)
  54:	8b 45 fc             	mov    -0x4(%rbp),%eax
  57:	83 f8 63             	cmp    $0x63,%eax
  5a:	74 1f                	je     7b <test_atomic_load_n+0x3b>
  5c:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
  63:	ba 1b 00 00 00       	mov    $0x1b,%edx
  68:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
  6f:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
  76:	e8 00 00 00 00       	callq  7b <test_atomic_load_n+0x3b>
  7b:	c9                   	leaveq 
  7c:	c3                   	retq   
  7d:	0f 1f 00             	nopl   (%rax)

0000000000000080 <test_atomic_store_n>:
  80:	e8 00 00 00 00       	callq  85 <test_atomic_store_n+0x5>
  85:	55                   	push   %rbp
  86:	48 89 e5             	mov    %rsp,%rbp
  89:	48 83 ec 08          	sub    $0x8,%rsp
  8d:	c7 45 fc 63 00 00 00 	movl   $0x63,-0x4(%rbp)
  94:	8b 55 fc             	mov    -0x4(%rbp),%edx
  97:	8b 45 fc             	mov    -0x4(%rbp),%eax
  9a:	39 c2                	cmp    %eax,%edx
  9c:	74 1f                	je     bd <test_atomic_store_n+0x3d>
  9e:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
  a5:	ba 2b 00 00 00       	mov    $0x2b,%edx
  aa:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
  b1:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
  b8:	e8 00 00 00 00       	callq  bd <test_atomic_store_n+0x3d>
  bd:	c9                   	leaveq 
  be:	c3                   	retq   
  bf:	90                   	nop

00000000000000c0 <test_atomic_exchange_n>:
  c0:	e8 00 00 00 00       	callq  c5 <test_atomic_exchange_n+0x5>
  c5:	55                   	push   %rbp
  c6:	48 89 e5             	mov    %rsp,%rbp
  c9:	48 83 ec 18          	sub    $0x18,%rsp
  cd:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
  d4:	00 00 
  d6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  da:	31 c0                	xor    %eax,%eax
  dc:	c7 45 ec 31 00 00 00 	movl   $0x31,-0x14(%rbp)
  e3:	c7 45 f0 63 00 00 00 	movl   $0x63,-0x10(%rbp)
  ea:	8b 75 f0             	mov    -0x10(%rbp),%esi
  ed:	48 8d 7d ec          	lea    -0x14(%rbp),%rdi
  f1:	e8 0a ff ff ff       	callq  0 <atomic_xchg>
  f6:	89 45 f4             	mov    %eax,-0xc(%rbp)
  f9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  fc:	83 f8 31             	cmp    $0x31,%eax
  ff:	74 1f                	je     120 <test_atomic_exchange_n+0x60>
 101:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 108:	ba 3d 00 00 00       	mov    $0x3d,%edx
 10d:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
 114:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 11b:	e8 00 00 00 00       	callq  120 <test_atomic_exchange_n+0x60>
 120:	8b 45 f0             	mov    -0x10(%rbp),%eax
 123:	39 45 ec             	cmp    %eax,-0x14(%rbp)
 126:	74 1f                	je     147 <test_atomic_exchange_n+0x87>
 128:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 12f:	ba 3e 00 00 00       	mov    $0x3e,%edx
 134:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
 13b:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 142:	e8 00 00 00 00       	callq  147 <test_atomic_exchange_n+0x87>
 147:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 14b:	65 48 33 04 25 28 00 	xor    %gs:0x28,%rax
 152:	00 00 
 154:	74 05                	je     15b <test_atomic_exchange_n+0x9b>
 156:	e8 00 00 00 00       	callq  15b <test_atomic_exchange_n+0x9b>
 15b:	c9                   	leaveq 
 15c:	c3                   	retq   
 15d:	0f 1f 00             	nopl   (%rax)

0000000000000160 <test_atomic_compare_exchange_n>:
 160:	e8 00 00 00 00       	callq  165 <test_atomic_compare_exchange_n+0x5>
 165:	55                   	push   %rbp
 166:	48 89 e5             	mov    %rsp,%rbp
 169:	48 83 ec 18          	sub    $0x18,%rsp
 16d:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
 174:	00 00 
 176:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 17a:	31 c0                	xor    %eax,%eax
 17c:	c7 45 ec 31 00 00 00 	movl   $0x31,-0x14(%rbp)
 183:	c7 45 f0 31 00 00 00 	movl   $0x31,-0x10(%rbp)
 18a:	c7 45 f4 63 00 00 00 	movl   $0x63,-0xc(%rbp)
 191:	8b 55 f4             	mov    -0xc(%rbp),%edx
 194:	8b 45 f0             	mov    -0x10(%rbp),%eax
 197:	f0 0f b1 55 ec       	lock cmpxchg %edx,-0x14(%rbp)
 19c:	8b 45 f4             	mov    -0xc(%rbp),%eax
 19f:	39 45 ec             	cmp    %eax,-0x14(%rbp)
 1a2:	74 1f                	je     1c3 <test_atomic_compare_exchange_n+0x63>
 1a4:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 1ab:	ba 51 00 00 00       	mov    $0x51,%edx
 1b0:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
 1b7:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 1be:	e8 00 00 00 00       	callq  1c3 <test_atomic_compare_exchange_n+0x63>
 1c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 1c7:	65 48 33 04 25 28 00 	xor    %gs:0x28,%rax
 1ce:	00 00 
 1d0:	74 05                	je     1d7 <test_atomic_compare_exchange_n+0x77>
 1d2:	e8 00 00 00 00       	callq  1d7 <test_atomic_compare_exchange_n+0x77>
 1d7:	c9                   	leaveq 
 1d8:	c3                   	retq   
 1d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000001e0 <test_atomic_add_fetch>:
 1e0:	e8 00 00 00 00       	callq  1e5 <test_atomic_add_fetch+0x5>
 1e5:	55                   	push   %rbp
 1e6:	48 89 e5             	mov    %rsp,%rbp
 1e9:	48 83 ec 10          	sub    $0x10,%rsp
 1ed:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
 1f4:	00 00 
 1f6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 1fa:	31 c0                	xor    %eax,%eax
 1fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
 203:	90                   	nop
 204:	f0 83 45 f4 01       	lock addl $0x1,-0xc(%rbp)
 209:	90                   	nop
 20a:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
 20e:	74 1f                	je     22f <test_atomic_add_fetch+0x4f>
 210:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 217:	ba 63 00 00 00       	mov    $0x63,%edx
 21c:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
 223:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 22a:	e8 00 00 00 00       	callq  22f <test_atomic_add_fetch+0x4f>
 22f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 233:	65 48 33 04 25 28 00 	xor    %gs:0x28,%rax
 23a:	00 00 
 23c:	74 05                	je     243 <test_atomic_add_fetch+0x63>
 23e:	e8 00 00 00 00       	callq  243 <test_atomic_add_fetch+0x63>
 243:	c9                   	leaveq 
 244:	c3                   	retq   
 245:	90                   	nop
 246:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 24d:	00 00 00 

0000000000000250 <test_atomic_sub_fetch>:
 250:	e8 00 00 00 00       	callq  255 <test_atomic_sub_fetch+0x5>
 255:	55                   	push   %rbp
 256:	48 89 e5             	mov    %rsp,%rbp
 259:	48 83 ec 10          	sub    $0x10,%rsp
 25d:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
 264:	00 00 
 266:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 26a:	31 c0                	xor    %eax,%eax
 26c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
 273:	90                   	nop
 274:	f0 83 6d f4 01       	lock subl $0x1,-0xc(%rbp)
 279:	90                   	nop
 27a:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%rbp)
 27e:	74 1f                	je     29f <test_atomic_sub_fetch+0x4f>
 280:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 287:	ba 72 00 00 00       	mov    $0x72,%edx
 28c:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
 293:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 29a:	e8 00 00 00 00       	callq  29f <test_atomic_sub_fetch+0x4f>
 29f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 2a3:	65 48 33 04 25 28 00 	xor    %gs:0x28,%rax
 2aa:	00 00 
 2ac:	74 05                	je     2b3 <test_atomic_sub_fetch+0x63>
 2ae:	e8 00 00 00 00       	callq  2b3 <test_atomic_sub_fetch+0x63>
 2b3:	c9                   	leaveq 
 2b4:	c3                   	retq   
 2b5:	90                   	nop
 2b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 2bd:	00 00 00 

00000000000002c0 <test_atomic_and_fetch>:
 2c0:	e8 00 00 00 00       	callq  2c5 <test_atomic_and_fetch+0x5>
 2c5:	55                   	push   %rbp
 2c6:	48 89 e5             	mov    %rsp,%rbp
 2c9:	48 83 ec 10          	sub    $0x10,%rsp
 2cd:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
 2d4:	00 00 
 2d6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 2da:	31 c0                	xor    %eax,%eax
 2dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
 2e3:	90                   	nop
 2e4:	48 8d 75 f4          	lea    -0xc(%rbp),%rsi
 2e8:	bf 01 00 00 00       	mov    $0x1,%edi
 2ed:	e8 1e fd ff ff       	callq  10 <atomic_and>
 2f2:	90                   	nop
 2f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
 2f7:	74 1f                	je     318 <test_atomic_and_fetch+0x58>
 2f9:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 300:	ba 81 00 00 00       	mov    $0x81,%edx
 305:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
 30c:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 313:	e8 00 00 00 00       	callq  318 <test_atomic_and_fetch+0x58>
 318:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 31c:	65 48 33 04 25 28 00 	xor    %gs:0x28,%rax
 323:	00 00 
 325:	74 05                	je     32c <test_atomic_and_fetch+0x6c>
 327:	e8 00 00 00 00       	callq  32c <test_atomic_and_fetch+0x6c>
 32c:	c9                   	leaveq 
 32d:	c3                   	retq   
 32e:	66 90                	xchg   %ax,%ax

0000000000000330 <test_atomic_xor_fetch>:
 330:	e8 00 00 00 00       	callq  335 <test_atomic_xor_fetch+0x5>
 335:	55                   	push   %rbp
 336:	48 89 e5             	mov    %rsp,%rbp
 339:	48 83 ec 10          	sub    $0x10,%rsp
 33d:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
 344:	00 00 
 346:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 34a:	31 c0                	xor    %eax,%eax
 34c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
 353:	90                   	nop
 354:	48 8d 75 f4          	lea    -0xc(%rbp),%rsi
 358:	bf 01 00 00 00       	mov    $0x1,%edi
 35d:	e8 ce fc ff ff       	callq  30 <atomic_xor>
 362:	90                   	nop
 363:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
 367:	74 1f                	je     388 <test_atomic_xor_fetch+0x58>
 369:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 370:	ba 90 00 00 00       	mov    $0x90,%edx
 375:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
 37c:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 383:	e8 00 00 00 00       	callq  388 <test_atomic_xor_fetch+0x58>
 388:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 38c:	65 48 33 04 25 28 00 	xor    %gs:0x28,%rax
 393:	00 00 
 395:	74 05                	je     39c <test_atomic_xor_fetch+0x6c>
 397:	e8 00 00 00 00       	callq  39c <test_atomic_xor_fetch+0x6c>
 39c:	c9                   	leaveq 
 39d:	c3                   	retq   
 39e:	66 90                	xchg   %ax,%ax

00000000000003a0 <test_atomic_or_fetch>:
 3a0:	e8 00 00 00 00       	callq  3a5 <test_atomic_or_fetch+0x5>
 3a5:	55                   	push   %rbp
 3a6:	48 89 e5             	mov    %rsp,%rbp
 3a9:	48 83 ec 10          	sub    $0x10,%rsp
 3ad:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
 3b4:	00 00 
 3b6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 3ba:	31 c0                	xor    %eax,%eax
 3bc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
 3c3:	90                   	nop
 3c4:	48 8d 75 f4          	lea    -0xc(%rbp),%rsi
 3c8:	bf 01 00 00 00       	mov    $0x1,%edi
 3cd:	e8 4e fc ff ff       	callq  20 <atomic_or>
 3d2:	90                   	nop
 3d3:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
 3d7:	74 1f                	je     3f8 <test_atomic_or_fetch+0x58>
 3d9:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 3e0:	ba 9f 00 00 00       	mov    $0x9f,%edx
 3e5:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
 3ec:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 3f3:	e8 00 00 00 00       	callq  3f8 <test_atomic_or_fetch+0x58>
 3f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 3fc:	65 48 33 04 25 28 00 	xor    %gs:0x28,%rax
 403:	00 00 
 405:	74 05                	je     40c <test_atomic_or_fetch+0x6c>
 407:	e8 00 00 00 00       	callq  40c <test_atomic_or_fetch+0x6c>
 40c:	c9                   	leaveq 
 40d:	c3                   	retq   
 40e:	66 90                	xchg   %ax,%ax

0000000000000410 <test_atomic_fetch_add>:
 410:	e8 00 00 00 00       	callq  415 <test_atomic_fetch_add+0x5>
 415:	55                   	push   %rbp
 416:	48 89 e5             	mov    %rsp,%rbp
 419:	48 83 ec 10          	sub    $0x10,%rsp
 41d:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
 424:	00 00 
 426:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 42a:	31 c0                	xor    %eax,%eax
 42c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
 433:	90                   	nop
 434:	f0 83 45 f4 01       	lock addl $0x1,-0xc(%rbp)
 439:	90                   	nop
 43a:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
 43e:	74 1f                	je     45f <test_atomic_fetch_add+0x4f>
 440:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 447:	ba ba 00 00 00       	mov    $0xba,%edx
 44c:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
 453:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 45a:	e8 00 00 00 00       	callq  45f <test_atomic_fetch_add+0x4f>
 45f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 463:	65 48 33 04 25 28 00 	xor    %gs:0x28,%rax
 46a:	00 00 
 46c:	74 05                	je     473 <test_atomic_fetch_add+0x63>
 46e:	e8 00 00 00 00       	callq  473 <test_atomic_fetch_add+0x63>
 473:	c9                   	leaveq 
 474:	c3                   	retq   
 475:	90                   	nop
 476:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 47d:	00 00 00 

0000000000000480 <test_atomic_fetch_sub>:
 480:	e8 00 00 00 00       	callq  485 <test_atomic_fetch_sub+0x5>
 485:	55                   	push   %rbp
 486:	48 89 e5             	mov    %rsp,%rbp
 489:	48 83 ec 10          	sub    $0x10,%rsp
 48d:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
 494:	00 00 
 496:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 49a:	31 c0                	xor    %eax,%eax
 49c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
 4a3:	90                   	nop
 4a4:	f0 83 6d f4 01       	lock subl $0x1,-0xc(%rbp)
 4a9:	90                   	nop
 4aa:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%rbp)
 4ae:	74 1f                	je     4cf <test_atomic_fetch_sub+0x4f>
 4b0:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 4b7:	ba c9 00 00 00       	mov    $0xc9,%edx
 4bc:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
 4c3:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 4ca:	e8 00 00 00 00       	callq  4cf <test_atomic_fetch_sub+0x4f>
 4cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 4d3:	65 48 33 04 25 28 00 	xor    %gs:0x28,%rax
 4da:	00 00 
 4dc:	74 05                	je     4e3 <test_atomic_fetch_sub+0x63>
 4de:	e8 00 00 00 00       	callq  4e3 <test_atomic_fetch_sub+0x63>
 4e3:	c9                   	leaveq 
 4e4:	c3                   	retq   
 4e5:	90                   	nop
 4e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 4ed:	00 00 00 

00000000000004f0 <test_atomic_fetch_and>:
 4f0:	e8 00 00 00 00       	callq  4f5 <test_atomic_fetch_and+0x5>
 4f5:	55                   	push   %rbp
 4f6:	48 89 e5             	mov    %rsp,%rbp
 4f9:	48 83 ec 10          	sub    $0x10,%rsp
 4fd:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
 504:	00 00 
 506:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 50a:	31 c0                	xor    %eax,%eax
 50c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
 513:	90                   	nop
 514:	48 8d 75 f4          	lea    -0xc(%rbp),%rsi
 518:	bf 01 00 00 00       	mov    $0x1,%edi
 51d:	e8 ee fa ff ff       	callq  10 <atomic_and>
 522:	90                   	nop
 523:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
 527:	74 1f                	je     548 <test_atomic_fetch_and+0x58>
 529:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 530:	ba d8 00 00 00       	mov    $0xd8,%edx
 535:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
 53c:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 543:	e8 00 00 00 00       	callq  548 <test_atomic_fetch_and+0x58>
 548:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 54c:	65 48 33 04 25 28 00 	xor    %gs:0x28,%rax
 553:	00 00 
 555:	74 05                	je     55c <test_atomic_fetch_and+0x6c>
 557:	e8 00 00 00 00       	callq  55c <test_atomic_fetch_and+0x6c>
 55c:	c9                   	leaveq 
 55d:	c3                   	retq   
 55e:	66 90                	xchg   %ax,%ax

0000000000000560 <test_atomic_fetch_xor>:
 560:	e8 00 00 00 00       	callq  565 <test_atomic_fetch_xor+0x5>
 565:	55                   	push   %rbp
 566:	48 89 e5             	mov    %rsp,%rbp
 569:	48 83 ec 10          	sub    $0x10,%rsp
 56d:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
 574:	00 00 
 576:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 57a:	31 c0                	xor    %eax,%eax
 57c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
 583:	90                   	nop
 584:	48 8d 75 f4          	lea    -0xc(%rbp),%rsi
 588:	bf 01 00 00 00       	mov    $0x1,%edi
 58d:	e8 9e fa ff ff       	callq  30 <atomic_xor>
 592:	90                   	nop
 593:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
 597:	74 1f                	je     5b8 <test_atomic_fetch_xor+0x58>
 599:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 5a0:	ba e7 00 00 00       	mov    $0xe7,%edx
 5a5:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
 5ac:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 5b3:	e8 00 00 00 00       	callq  5b8 <test_atomic_fetch_xor+0x58>
 5b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 5bc:	65 48 33 04 25 28 00 	xor    %gs:0x28,%rax
 5c3:	00 00 
 5c5:	74 05                	je     5cc <test_atomic_fetch_xor+0x6c>
 5c7:	e8 00 00 00 00       	callq  5cc <test_atomic_fetch_xor+0x6c>
 5cc:	c9                   	leaveq 
 5cd:	c3                   	retq   
 5ce:	66 90                	xchg   %ax,%ax

00000000000005d0 <test_atomic_fetch_or>:
 5d0:	e8 00 00 00 00       	callq  5d5 <test_atomic_fetch_or+0x5>
 5d5:	55                   	push   %rbp
 5d6:	48 89 e5             	mov    %rsp,%rbp
 5d9:	48 83 ec 10          	sub    $0x10,%rsp
 5dd:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
 5e4:	00 00 
 5e6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 5ea:	31 c0                	xor    %eax,%eax
 5ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
 5f3:	90                   	nop
 5f4:	48 8d 75 f4          	lea    -0xc(%rbp),%rsi
 5f8:	bf 01 00 00 00       	mov    $0x1,%edi
 5fd:	e8 1e fa ff ff       	callq  20 <atomic_or>
 602:	90                   	nop
 603:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
 607:	74 1f                	je     628 <test_atomic_fetch_or+0x58>
 609:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 610:	ba f6 00 00 00       	mov    $0xf6,%edx
 615:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
 61c:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 623:	e8 00 00 00 00       	callq  628 <test_atomic_fetch_or+0x58>
 628:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 62c:	65 48 33 04 25 28 00 	xor    %gs:0x28,%rax
 633:	00 00 
 635:	74 05                	je     63c <test_atomic_fetch_or+0x6c>
 637:	e8 00 00 00 00       	callq  63c <test_atomic_fetch_or+0x6c>
 63c:	c9                   	leaveq 
 63d:	c3                   	retq   
 63e:	66 90                	xchg   %ax,%ax

0000000000000640 <test_atomic_signal_fence>:
 640:	e8 00 00 00 00       	callq  645 <test_atomic_signal_fence+0x5>
 645:	55                   	push   %rbp
 646:	48 89 e5             	mov    %rsp,%rbp
 649:	5d                   	pop    %rbp
 64a:	c3                   	retq   
 64b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000000650 <test_atomic_thread_fence>:
 650:	e8 00 00 00 00       	callq  655 <test_atomic_thread_fence+0x5>
 655:	55                   	push   %rbp
 656:	48 89 e5             	mov    %rsp,%rbp
 659:	5d                   	pop    %rbp
 65a:	c3                   	retq   
 65b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000000660 <test_atomic_clear>:
 660:	e8 00 00 00 00       	callq  665 <test_atomic_clear+0x5>
 665:	55                   	push   %rbp
 666:	48 89 e5             	mov    %rsp,%rbp
 669:	5d                   	pop    %rbp
 66a:	c3                   	retq   
 66b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000000670 <test_atomic_test_and_set>:
 670:	e8 00 00 00 00       	callq  675 <test_atomic_test_and_set+0x5>
 675:	55                   	push   %rbp
 676:	48 89 e5             	mov    %rsp,%rbp
 679:	5d                   	pop    %rbp
 67a:	c3                   	retq   
 67b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000000680 <test_atomic_fetch_nand>:
 680:	e8 00 00 00 00       	callq  685 <test_atomic_fetch_nand+0x5>
 685:	55                   	push   %rbp
 686:	48 89 e5             	mov    %rsp,%rbp
 689:	5d                   	pop    %rbp
 68a:	c3                   	retq   
 68b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000000690 <test_atomic_nand_fetch>:
 690:	e8 00 00 00 00       	callq  695 <test_atomic_nand_fetch+0x5>
 695:	55                   	push   %rbp
 696:	48 89 e5             	mov    %rsp,%rbp
 699:	5d                   	pop    %rbp
 69a:	c3                   	retq   
 69b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000006a0 <test_atomic_is_lock_free>:
 6a0:	e8 00 00 00 00       	callq  6a5 <test_atomic_is_lock_free+0x5>
 6a5:	55                   	push   %rbp
 6a6:	48 89 e5             	mov    %rsp,%rbp
 6a9:	5d                   	pop    %rbp
 6aa:	c3                   	retq   
 6ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000006b0 <test_atomic_always_lock_free>:
 6b0:	e8 00 00 00 00       	callq  6b5 <test_atomic_always_lock_free+0x5>
 6b5:	55                   	push   %rbp
 6b6:	48 89 e5             	mov    %rsp,%rbp
 6b9:	5d                   	pop    %rbp
 6ba:	c3                   	retq   

Disassembly of section .init.text:

0000000000000000 <init_module>:
   0:	55                   	push   %rbp
   1:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
   8:	48 89 e5             	mov    %rsp,%rbp
   b:	e8 00 00 00 00       	callq  10 <init_module+0x10>
  10:	e8 00 00 00 00       	callq  15 <init_module+0x15>
  15:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
  1c:	e8 00 00 00 00       	callq  21 <init_module+0x21>
  21:	e8 00 00 00 00       	callq  26 <init_module+0x26>
  26:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
  2d:	e8 00 00 00 00       	callq  32 <init_module+0x32>
  32:	e8 00 00 00 00       	callq  37 <init_module+0x37>
  37:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
  3e:	e8 00 00 00 00       	callq  43 <init_module+0x43>
  43:	e8 00 00 00 00       	callq  48 <init_module+0x48>
  48:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
  4f:	e8 00 00 00 00       	callq  54 <init_module+0x54>
  54:	e8 00 00 00 00       	callq  59 <init_module+0x59>
  59:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
  60:	e8 00 00 00 00       	callq  65 <init_module+0x65>
  65:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
  6c:	e8 00 00 00 00       	callq  71 <init_module+0x71>
  71:	e8 00 00 00 00       	callq  76 <init_module+0x76>
  76:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
  7d:	e8 00 00 00 00       	callq  82 <init_module+0x82>
  82:	e8 00 00 00 00       	callq  87 <init_module+0x87>
  87:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
  8e:	e8 00 00 00 00       	callq  93 <init_module+0x93>
  93:	e8 00 00 00 00       	callq  98 <init_module+0x98>
  98:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <init_module+0xa4>
  a4:	e8 00 00 00 00       	callq  a9 <init_module+0xa9>
  a9:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
  b0:	e8 00 00 00 00       	callq  b5 <init_module+0xb5>
  b5:	e8 00 00 00 00       	callq  ba <init_module+0xba>
  ba:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
  c1:	e8 00 00 00 00       	callq  c6 <init_module+0xc6>
  c6:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
  cd:	e8 00 00 00 00       	callq  d2 <init_module+0xd2>
  d2:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
  d9:	e8 00 00 00 00       	callq  de <init_module+0xde>
  de:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
  e5:	e8 00 00 00 00       	callq  ea <init_module+0xea>
  ea:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
  f1:	e8 00 00 00 00       	callq  f6 <init_module+0xf6>
  f6:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
  fd:	e8 00 00 00 00       	callq  102 <init_module+0x102>
 102:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 109:	e8 00 00 00 00       	callq  10e <init_module+0x10e>
 10e:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 115:	e8 00 00 00 00       	callq  11a <init_module+0x11a>
 11a:	31 c0                	xor    %eax,%eax
 11c:	5d                   	pop    %rbp
 11d:	c3                   	retq   

Disassembly of section .exit.text:

0000000000000000 <cleanup_module>:
   0:	55                   	push   %rbp
   1:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
   8:	48 89 e5             	mov    %rsp,%rbp
   b:	e8 00 00 00 00       	callq  10 <cleanup_module+0x10>
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   
